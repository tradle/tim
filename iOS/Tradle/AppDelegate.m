/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"
#import <CodePush/CodePush.h>
#import <React/RCTBridge.h>
#import <React/RCTBundleURLProvider.h>
#import <React/RCTRootView.h>
#import <React/RCTLinkingManager.h>
#import <React/RCTLog.h>
#import <React/RCTPushNotificationManager.h>
#import <React/RCTEventEmitter.h>
#import "Orientation.h"
#import "QTouchposeApplication.h"
#import <asl.h>
#import "RNSplashScreen.h"
#import <react-native-branch/RNBranch.h>
//#import <Crashlytics/Crashlytics.h>
// #import <Firebase.h>
//#import <Fabric/Fabric.h>

#define SYSTEM_VERSION_GRATERTHAN_OR_EQUALTO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)

@implementation AppDelegate

NSInteger const RNTradleSecurityOverlayTag = 101;
NSString *const RNTradleSecurityOverlayImage = @"splash1536x2048.png";

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  // NSURL *jsCodeLocation;
  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];
  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge
                                                   moduleName:@"Tradle"
                                            initialProperties:nil];
  if (@available(iOS 14, *)) {
    UIDatePicker *picker = [UIDatePicker appearance];
    picker.preferredDatePickerStyle = UIDatePickerStyleWheels;
  }
  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

  QTouchposeApplication *touchposeApplication = (QTouchposeApplication *)application;
  touchposeApplication.alwaysShowTouches = YES;

// #ifdef DEBUG
//   jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index.ios" fallbackResource:nil];
// //  if (jsCodeLocation == nil) {
// //    jsCodeLocation = [NSURL URLWithString:@"http://10.0.0.35:8081/index.ios.bundle?platform=ios&dev=true"];
// //  }

// //  [RNBranch setDebug];
// #else
//   jsCodeLocation = [CodePush bundleURL];
//     // jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
// #endif

//  [RNBranch initSessionWithLaunchOptions:launchOptions isReferrable:YES];
//  [FIRApp configure];

  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by "Bundle React Native code and images" build step.
   */

//  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
//                                                      moduleName:@"Tradle"
//                                               initialProperties:nil
//                                                   launchOptions:launchOptions];


//  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];

#ifdef DEBUG
#else
  [RNSplashScreen show]; //show splash screen
//  [Fabric with:@[[Crashlytics class]]];
  // RCTSetLogThreshold(RCTLogLevelInfo);
  // RCTSetLogFunction(CrashlyticsReactLogFunction);
#endif

//  if (SYSTEM_VERSION_GRATERTHAN_OR_EQUALTO(@"10.0")) {
//    [self registerForRemoteNotifications];
//  }
//
  return YES;
}

// NSURL *jsCodeLocation;

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
#ifdef DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index.ios" fallbackResource:nil];
//  if (jsCodeLocation == nil) {
//    jsCodeLocation = [NSURL URLWithString:@"http://10.0.0.35:8081/index.ios.bundle?platform=ios&dev=true"];
//  }

//  [RNBranch setDebug];
#else
  return [CodePush bundleURL];
    // jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}
//- (void) registerForRemoteNotifications {
//  UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];
//  center.delegate = self;
//  [center requestAuthorizationWithOptions:(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge) completionHandler:^(BOOL granted, NSError * _Nullable error){
//    if(error) {
//      return;
//    }
//
//    dispatch_async(dispatch_get_main_queue(), ^{
//      [[UIApplication sharedApplication] registerForRemoteNotifications];
//    });
//  }];
//}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
  if (![RNBranch.branch application:application openURL:url sourceApplication:sourceApplication annotation:annotation]) {
    // do other deep link routing for the Facebook SDK, Pinterest SDK, etc
    return [RCTLinkingManager application:application openURL:url sourceApplication:sourceApplication annotation:annotation];
  }

  return YES;
}

- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler {
  return [RNBranch continueUserActivity:userActivity];
}

// Required to register for notifications
- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings
{
  [RCTPushNotificationManager didRegisterUserNotificationSettings:notificationSettings];
}
// Required for the register event.
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  [RCTPushNotificationManager didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}
// Required for the notification event.
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)notification fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
//  [RNBranch handlePushNotification:notification];
  [RCTPushNotificationManager didReceiveRemoteNotification:notification];

  // call completionHandler after 20 seconds (30 is max)
  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 20 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
    completionHandler(UIBackgroundFetchResultNewData);
  });
}
// Required for the localNotification event.
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
  [RCTPushNotificationManager didReceiveLocalNotification:notification];
}
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
  NSLog(@"%@", error);
}

//Called when a notification is delivered to a foreground app.
-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler
{
  completionHandler(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge);
}

- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {
  return [Orientation getOrientation];
}

//RCTLogFunction CrashlyticsReactLogFunction = ^(
//                                         RCTLogLevel level,
//                                         __unused RCTLogSource source,
//                                         NSString *fileName,
//                                         NSNumber *lineNumber,
//                                         NSString *message
//                                         )
//{
//    NSString *log = RCTFormatLog([NSDate date], level, fileName, lineNumber, message);
//
//    #ifdef DEBUG
//        fprintf(stderr, "%s\n", log.UTF8String);
//        fflush(stderr);
//    #else
//        fprintf(stderr, "%s\n", log.UTF8String);
//        fflush(stderr);
//        CLS_LOG(@"REACT LOG: %s", log.UTF8String);
//    #endif
//
//    int aslLevel;
//    switch(level) {
//        case RCTLogLevelTrace:
//            aslLevel = ASL_LEVEL_DEBUG;
//            break;
//        case RCTLogLevelInfo:
//            aslLevel = ASL_LEVEL_NOTICE;
//            break;
//        case RCTLogLevelWarning:
//            aslLevel = ASL_LEVEL_WARNING;
//            break;
//        case RCTLogLevelError:
//            aslLevel = ASL_LEVEL_ERR;
//            break;
//        case RCTLogLevelFatal:
//            aslLevel = ASL_LEVEL_CRIT;
//            break;
//    }
//    asl_log(NULL, NULL, aslLevel, "%s", message.UTF8String);
//
//
//};

// https://stackoverflow.com/questions/19792850/display-a-view-or-splash-screen-before-applicationdidenterbackground-to-avoid-a?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

- (void)applicationWillResignActive:(UIApplication *)application
{
  // adding overlay image here causes following issue:
  // when applicationWillResignActive is called as a result of push notification opt-in dialog,
  // applicationWillEnterForeground is never called after that
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
  UIImageView *imageView = [[UIImageView alloc] initWithFrame:self.window.bounds];
  imageView.tag = RNTradleSecurityOverlayTag;    // Give some decent tagvalue or keep a reference of imageView in self
  [imageView setImage:[UIImage imageNamed:RNTradleSecurityOverlayImage]];
  imageView.contentMode = UIViewContentModeScaleAspectFill;
  [UIApplication.sharedApplication.keyWindow.subviews.lastObject addSubview:imageView];
  // this doesn't appear to work, whether called here or `didFinishLaunchingWithOptions`, but seems prudent to include it
  [application ignoreSnapshotOnNextApplicationLaunch];
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
  UIImageView *imageView = (UIImageView *)[UIApplication.sharedApplication.keyWindow.subviews.lastObject viewWithTag:RNTradleSecurityOverlayTag];   // search by the same tag value
  [imageView removeFromSuperview];
}

- (void) ignoreSnapshotOnNextApplicationLaunch {}

@end
